rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 認証済みかどうかチェックする関数
    function isAuthenticated() {
      return request.auth != null;
    }

    // ユーザーのIDと認証情報が一致するかチェックする関数
    function isUserAuthenticated(userID) {
      return request.auth.uid == userID;
    }

    function incomingData() {
      return request.resource.data;
    }

    function existingData() {
      return resource.data;
    }

    // フィールドの値がstringの場合のバリデーション関数
    function validateString(text, min, max) {
      return text is string && min <= text.size() && text.size() <= max;
    }

    // フィールドの値がintegerの場合のバリデーション関数
    function validateInt(num, min, max) {
      return num is int && min <= num && num <= max;
    }

    // Userコレクションを管理する
    match /users/{userID} {
      allow get: if isAuthenticated();
      allow create: if isUserAuthenticated(userID)
        && (!('name' in incomingData()) || (validateString(incomingData().name, 3, 10)))
        && incomingData().createdAt == request.time
        && incomingData().updatedAt == request.time
      ;
      allow update: if isUserAuthenticated(userID) && incomingData().updatedAt == request.time;

      match /logs/{logsID} {
        allow get: if isUserAuthenticated(userID);
        allow create: if isUserAuthenticated(userID)
          && ( (validateString(incomingData().title, 0, 100)))
          && incomingData().date == request.time
          && incomingData().createdAt == request.time
          && incomingData().updatedAt == request.time;
      }

    }
  }
}